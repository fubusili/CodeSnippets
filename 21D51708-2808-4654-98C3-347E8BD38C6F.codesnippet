<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>x_request_list</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>extension TGConnectionRecommendList {
    private func requestList(_ isShowLoading: Bool = true, isLoadMore: Bool = false, completion: requestCompletionHandle? = nil) {
        if isShowLoading {
            self.showInteractiveHud()
        }
        var begin: Int = 0
        let end: Int = 20
        if isLoadMore {
            begin = listCount
        }
        self.request(begin, size: end) { (listModel) in
            self.listModel = listModel as? TGConnectionRecommendListModel
            if let model = listModel as? TGConnectionRecommendListModel {
                if let list = model.list, list.count &gt; 0 {
                    if isLoadMore {
                        self.list.append(contentsOf: list)
                    }
                    else {
                        self.list.removeAll()
                        self.list.append(contentsOf: list)
                    }
                }
                else if !isLoadMore {
                    self.list.removeAll()
                }
            }
            DispatchQueue.main.after(0) {
                self.tableView.reloadData()
            }
        }
    }
    
    private func request(_ start: Int, size: Int, completion:requestCompletionHandle?) {
        self.request?.cancel()
        self.request = TGNetworkManager.requestConnectionRecommendList(start, size: size, successHandle: {(info) in
            completion?(info)
        }, failureHandle: { (errMsg, error, statusCode, errorInfo) in
            if let msg = errMsg, msg.count &gt; 0 {
                self.showInteractiveError(msg, afterDelay: 1.5)
            }
            DispatchQueue.main.after(1.5) {
                completion?(nil)
            }
        })
    }
}

extension TGNetworkManager {
    class func requestConnectionRecommendList(_ start: Int, size: Int, successHandle:requestCompletionHandle?, failureHandle:requesetFailureHandle?) -&gt; TGNetworkRequestInfo? {
        let params: [String : Any] = ["start": start, "size": size]
        return TGNetworkManager.shareInstnace()?.request(with: .get, urlString: "/mobile-api/human/recommendation/search", parameters: params, headerParams: nil, successBlock: { (obj) in
            let info: TGConnectionRecommendListModel? = TGConnectionRecommendListModel.yy_model(withJSON: obj)
            successHandle?(info)
        }, failureBlock: { (error, statusCode, errInfo) in
            let errMsg: String = TGNetworkErrorBaseHandler.getFinalErrMessage(withStatusCode: errInfo != nil ? Int32(errInfo!.err) : statusCode, networkErrorInfo: errInfo)
            failureHandle?(errMsg, error, Int(statusCode), errInfo)
        })
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>21D51708-2808-4654-98C3-347E8BD38C6F</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>request list data </string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
